using CG.CqrsCrud.Attributes.Commons;
using System.Reflection;

namespace CG.CqrsCrud.Generators
{
    public static class UpdateMediatorGenerator<T>
    {
        public static bool GenerateUpdateMediator(string plural, string commandNameSpace, string commandPath)
        {
            List<string> command = new List<string>();
            string primaryKey = typeof(T)
                .GetProperties()
                .Where(x => x.GetCustomAttributes().Where(a => a is PrimaryKeyAttribute).Any()).First().Name;

            string primaryKeyType = typeof(T)
                .GetProperties()
                .Where(x => x.GetCustomAttributes().Where(a => a is PrimaryKeyAttribute).Any()).First().PropertyType.Name;

            command.Add("using MediatR;");
            command.Add("using System.Text.Json.Serialization;");
            command.Add("");
            command.Add($"namespace {commandNameSpace}.{plural};");
            command.Add("");
            command.Add($"public class Update{typeof(T).Name}Command : IRequest<bool>");
            command.Add("{");
            foreach (PropertyInfo info in typeof(T).GetProperties())
            {
                if (info.SetMethod == null)
                {
                    continue;
                }
                if(info.GetCustomAttributes().Where(x => x is PrimaryKeyAttribute).Any())
                {
                    command.Add("");
                    command.Add($"\t[JsonIgnore]");
                }
                command.Add($"\tpublic {info.PropertyType.Name} {info.Name} {{ get; set;}}");
            }
            command.Add("}");
            File.WriteAllLines($"{commandPath}\\Update{typeof(T).Name}Command.cs", command);

            List<string> commandHandler = new List<string>();
            commandHandler.Add("using MediatR;");
            commandHandler.Add("");
            commandHandler.Add($"namespace {commandNameSpace}.{plural};");
            commandHandler.Add("");
            commandHandler.Add($"public class Update{typeof(T).Name}CommandHandler : IRequestHandler<Update{typeof(T).Name}Command, bool>");
            commandHandler.Add("{");
            commandHandler.Add($"\tprivate readonly I{typeof(T).Name}Repository _{typeof(T).Name.ToLower()}Repository;");
            commandHandler.Add($"\tpublic Update{typeof(T).Name}CommandHandler(I{typeof(T).Name}Repository {typeof(T).Name.ToLower()}Repository)");
            commandHandler.Add("\t{");
            commandHandler.Add($"\t\t_{typeof(T).Name.ToLower()}Repository = {typeof(T).Name.ToLower()}Repository;");
            commandHandler.Add("\t}");
            commandHandler.Add("\t");
            commandHandler.Add($"\tpublic async Task<bool> Handle(Update{typeof(T).Name}Command request, CancellationToken cancellationToken)");
            commandHandler.Add("\t{");
            commandHandler.Add($"\t\tvar  {typeof(T).Name.ToLower()} = _{typeof(T).Name.ToLower()}Repository.Get{typeof(T).Name}(request.{primaryKey});");
            commandHandler.Add($"\t\tif({typeof(T).Name.ToLower()} == null)");
            commandHandler.Add("\t\t{");
            commandHandler.Add("\t\t\treturn false;");
            commandHandler.Add("\t\t}");
            commandHandler.Add("");
            foreach (PropertyInfo info in typeof(T).GetProperties())
            {
                if (info.SetMethod == null || info.GetCustomAttributes().Where(x => x is AutoGeneratedPrimaryKey).Any())
                {
                    continue;
                }
                commandHandler.Add($"\t\t{typeof(T).Name.ToLower()}.{info.Name} = request.{info.Name};");
            }
            commandHandler.Add("\t\t");
            commandHandler.Add($"\t\treturn await _{typeof(T).Name.ToLower()}Repository.Update{typeof(T).Name}({typeof(T).Name.ToLower()});");
            commandHandler.Add("\t}");
            commandHandler.Add("}");
            File.WriteAllLines($"{commandPath}\\Update{typeof(T).Name}Command.Handler.cs", commandHandler);

            return true;
        }
    }
}
